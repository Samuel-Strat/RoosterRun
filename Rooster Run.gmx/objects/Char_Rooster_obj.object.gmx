<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Char_Rooster_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Char_par</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Systemy stuff
//GRAPHICS
/*
Moved is wether it should show walking,crawling
Direction is the direction faced 1= Right, -1 = Left
image_speed is the image speed -Basic Tweaks
*/
Moved = false
Direction = 1


//MOVEMENT/GRAPHICS
/*
jumped is the number of times you have jumped since you last touched ground
*/
Jumped = 0

//MOVEMENT
/*
Xspeed is how fast you are moving at the end step
Xvel is Xspeed Carried between steps
*/
Xspeed = 0
Xvel = 0
Xext = 0

/*
Yspeed is how fast you are moving at end step
Yvel is how fast Yspeed carried between steps
*/
Yspeed = 0
Yvel = 0
Yext = 0

Thru = 0

//Controll These recieve signals from the controller
E_UP = 0
E_DOWN = 0
E_LEFT = 0
E_RIGHT = 0
E_A = 0
E_B = 0
E_C = 0
/*
To use these use 
E &gt; 0 means the key is down
E &lt;= 0 means the key is not down
E = 2 means the key has been pressed
E = -1 means the key has been released
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic Tweaks

//how fast the sprite is played
image_speed = .5

//How high each jump takes you(may take some finnegleing )
Jump_Strength = 18

//how many times you can jump before you have to touch the ground
Jump_Limit = 2

//The Speed you walk at
Speed_Walk = 4

//The Speed you jump at
Speed_Jump = 6

//The amount you slow down each step
Xfric = 6

//The amount you accelerate down each step
Gravity = 4
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// applys the speeds
// the four is the scale


move_it_slant(4)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Friction and Gravity

//Friction
if abs(Xvel) &lt;= Xfric
{
    Xspeed = 0
}
else
{
    Xspeed = Xvel-(Xfric*sign(Xvel))
}

//Gravity
Yspeed = Yvel+Gravity

if Yspeed &gt; 22
{
    Yspeed = 22
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//Thru determines wether you should treat platforms as solid
if place_meeting(x,y,Platform_par) or E_DOWN &gt; 0
{
    Thru = 1
}
else
{
    Thru = 0
}

//Gravity
if on_ground()
{
    Yspeed = 0
    Jumped = 0
}

//Jumping
if E_A = 2 and E_C &lt;= 0 and Jumped &lt; Jump_Limit
{
    Jumped += 1
    Yspeed = -Jump_Strength
}

if Jumped = Jump_Limit
{
    E_C = 1
}

//Walking you go half speed while ducking
if Jumped &gt; 0
{Xspeed += Speed_Jump*((E_RIGHT&gt;0)-(E_LEFT&gt;0))}
else
{Xspeed += Speed_Walk*((E_RIGHT&gt;0)-(E_LEFT&gt;0))}

//Velocities, carries over into next step
Xvel = Xspeed
Yvel = Yspeed
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Graphics
Moved = false

if Xspeed != 0
{
    Moved = true
    Direction = sign(Xspeed)
}

image_choose_ext(0,4,6)
/*
image_choose_ext keeps the image looping the right animation
A0 is where the standing animation ends
the start of the walking animation is A0+1
A1 is where the walking animation ends
the start of the jumping animation is A1+1 etc..
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,x,y,Direction,1,0,c_white,1)
//Draws itself
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
